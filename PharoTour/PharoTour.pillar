!A quick tour of Pharo
@cha:tour

In this chapter we will give you a high-level tour of Pharo to help you get
comfortable with the environment. There will be plenty of opportunities to try
things out, so it would be a good idea if you have a computer handy when you
read this chapter.

In particular, you will fire up Pharo, learn about the different ways of
interacting with the system, and discover some of the basic tools. You will also
learn how to define a new method, create an object and send it messages.

''Note:'' Most of the introductory material in this book will work with any
Pharo version, so if you already have one installed, you may as well continue to
use it. However, if you notice differences between the appearance or behaviour
of your system and what is described here, do not be surprised.

!!Getting started

Pharo is available as a free download from
*http://pharo.org/download>http://pharo.org/download*. Click the button for your
operating system to download the appropriate ==.zip== file. For example, the
full Pharo 4.0 distribution for Mac OS X will be available at
*http://files.pharo.org/platform/Pharo4.0-mac.zip>http://files.pharo.org/platform/Pharo4.0-mac.zip*.

Once that file is unzipped, it will contain everything you need to run
Pharo (this includes the VM, the image, and the sources, as explained below).

!!Installing Pharo

Pharo does not need to install anything in your system, as it's perfectly
capable of running standalone. Depending on your platform, download the
appropriate zip file, uncompress it in a directory of your choice and now you
are ready to launch Pharo. In case of Ubuntu Linux, there is also the extra
option of installing Pharo via the Pharo PPA.

!!Pharo components

Like many Smalltalk-derived systems, Pharo currently consists of three main
components. Although you do not need to deal with them directly for the purposes
of this book, it is important to understand the roles that they play.

""1."" The ""image"" is a current snapshot of a running Pharo system, frozen in
time. It consists of two files: an ''.image'' file, which contains the state of
all of the objects in the system (including classes and methods, since they are
objects too), and a ''.changes'' file, which contains the log of all of the
changes to the source code of the system. For Pharo 4.0, these files are named
==Pharo4.0.image== and ==Pharo4.0.changes==. These files are portable across
operating systems, and can be copied and run on any appropriate virtual machine.

""2."" The ""virtual machine"" (VM) is the only part of the system that is
different for each operating system. Pre-compiled virtual machines are available
for all major computing environments. (For example, on Windows, the VM file is
named ==Pharo.exe==).

""3."" The ""sources"" file contains the source code for all of the parts of
Pharo that don't change very frequently. For Pharo 4.0, this file is named
==PharoV40.sources==.

As you work in Pharo, the ''.image'' and ''.changes'' files are modified (so you
need to make sure that they are writable). Always keep these two files together.
Never edit them directly with a text editor, as Pharo uses them to store the
objects you work with and to log the changes you make to the source code. It is
a good idea to keep a backup copy of the downloaded ''.image'' and ''.changes''
files so you can always start from a fresh image and reload your code.

The ''.sources'' file and the VM can be read-only, and can be shared between
different users. All of these files can be placed in the same directory, but it
is also possible to put the Virtual Machine and sources file in separate
directory where everyone has access to them. Do whatever works best for your
style of working and your operating system.

!!Launching Pharo

To start Pharo, double click on the Pharo executable (or, for more advanced
users, drag and drop the ==.image== file onto the VM, or use the command line).

On ""Mac OS X"", double click the ==Pharo4.0.app== bundle in the unzipped download.

On ""Linux"", double click (or invoke from the command line) the ==pharo==
executable bash script from the unzipped Pharo folder.

On ""Windows"", enter the unzipped Pharo folder and double click ==Pharo.exe==.

In general, Pharo tries to "do the right thing". If you double click on the VM,
it looks for an image file in the default location. If you double click on an
==.image== file, it tries to find the nearest VM to launch it with.

Once you have multiple VMs (or multiple images) installed on your
machine, the operating system may no longer be able to guess the right one. In this
case, it is safer to specify exactly which ones you meant to launch, either
by dragging and dropping the image file onto the VM, or specifying the image on
the command line (see the next section).

!!!Launching Pharo via the command line

The general pattern for launching Pharo from a terminal is:

[[[
<Pharo executable> <path to Pharo image>
]]]

!!!!Linux command line

For Linux, assuming that you're in the unzipped ==pharo4.0== folder:

[[[
./pharo shared/Pharo4.0.image
]]]

!!!!Mac OS X command line

For Mac OS X, assuming that you're in the directory with the unzipped
==Pharo4.0.app== bundle:

[[[
Pharo4.0.app/Contents/MacOS/Pharo Pharo4.0.app/Contents/Resources/Pharo4.0.image
]]]

Incidentally, to drag-and-drop images on Mac OS in Finder, you need to
right-click on ==Pharo4.0.app== and select 'Show Package Contents'.

!!!!Windows command line

For Windows, assuming that you're in the unzipped ==Pharo4.0== folder:

[[[
Pharo.exe Pharo4.0.image
]]]

!!The World Menu

Once Pharo is running, you should see a single large window, possibly containing
some open workspace windows (see Figure *fig:worldMenu*). You might notice a menu
bar, but Pharo mainly makes use of context-dependent pop-up menus.

+Pharo 4.0 window with World Menu activated>file://figures/Pharo40.png|width=100|label=fig:worldMenu+

Clicking anywhere on the background of the Pharo window will display the
World Menu. World Menu contains many of the Pharo tools, utilities and settings.

You will see a list of several core tools in Pharo, including the class browser
and the workspace. We will encounter most of them in the coming chapters.

!!!Interacting with Pharo

Pharo offers three ways to interact with the system using a mouse or other
pointing device.

""click"" (or left-click): this is the most often used mouse button, and is normally equivalent
to left-clicking (or clicking a single-mouse button without any modifier key).
For example, click on the background of the Pharo window to bring up the “World”
menu (Figure *fig:worldMenu*).

""action-click"" (or right-click): this is the next most used button. It is used
to bring up a contextual menu that offers different sets of actions depending on
where the mouse is pointing (see Figure *fig:pharotutorial*). If you do not have a
multi-button mouse, then normally you will configure the control modifier key to
action-click with the mouse button.

""meta-click"": Finally, you may meta-click on any object displayed in the image
to activate the "morphic halo", an array of handles that are used to perform
operations on the on-screen objects themselves, such as inspecting or resizing
them (see Figure *fig:halos*). If you let the mouse linger over a handle, a help
balloon will explain its function. In Pharo, how you meta-click depends on your
operating system: either you must hold Shift-Ctrl or Shift-Option (on Mac OS X)
while clicking.

%+Action Click brings the contextual menu.>file://figures/operating.png|width=80|label=fig:operating+

+Meta-Clicking brings the Halos>file://figures/addHalo.png|width=80|label=fig:halos+

!!Sending messages

In the Pharo window, click on an open space to open the World Menu, and
then select the "Playground" menu option. The Playground tool will open (you may
recognize it as the "Workspace" tool, from previous versions of Pharo). We can
use the Playground to quickly execute Pharo code. Enter the following code in
it, then right click and select "do it":

[[[language=smalltalk
PharoTutorial go.]]]

+Executing an expression is simple with the "do it" menu item.>file://figures/PharoTutorialOption.png|width=70|label=fig:pharotutorial+

This expression will trigger the Pharo tutorial (as shown in Figure
*fig:ProfStef*). It is a simple and interactive tutorial that will teach you
the basics of Pharo. You have just sent your first message. Pharo is based on
the concept of sending messages to objects. The Pharo objects are like your
soldiers ready to obey once you send them a message they can understand. We
will see how an object can understand a message, later on.

+PharoTutorial is a simple interactive tutorial to learn about Pharo>file://figures/ProfStef.png|width=80|label=fig:ProfStef+

If you talk to Pharoers for a while, you will notice that they generally do not
use expressions like "call an operation" or "invoke a method", as developers do
in other programming languages. Instead they will say "send a message". This
reflects the idea that objects are responsible for their own actions. You never
tell an object what to do, instead you politely ask it to do something by
sending it a message. The object, and not the sender, selects the appropriate
method for responding to your message.

As a user you don't need to understand how each message works, the only thing
you need to know is what the available messages are for the objects that
interest you. This way an object can hide its complexity, and coding can be kept
as simple as possible without losing flexibility.

!!Saving, quitting and restarting a Pharo session

You can exit Pharo at any point, by closing the Pharo window as you do any other
application window. Additionally you can use the World Menu and select either
"Save and quit" or "Quit".

In any case Pharo will display a prompt to ask you about saving your image. If
you do save your image and reopen it, you will see that things are ''exactly''
as you left them. This happens because the image file is capable of storing any
information (created objects, edited text, added methods... of course since they
are all objects) that Pharo has loaded into your memory so that nothing is lost
on exit.

When you start Pharo for the first time, the Pharo virtual machine loads the
image file that you provide. This file contains a snapshot of a large number of
objects, including a vast amount of pre-existing code and programming tools
(all of which are objects). As you work with Pharo, you will send messages to
these objects, you will create new objects, and some of these objects will die
and their memory will be reclaimed (garbage-collected).

When you quit Pharo, you will normally save a snapshot that contains all of your
objects. If you save normally, you will overwrite your old image file with the
new snapshot. Alternatively, you may save the image under a new name.

As mentioned earlier, in addition to the ''.image'' file, there is also a
''.changes'' file. This file contains a log of all the changes to the source
code that you have made using the standard tools. Most of the time you do not
need to worry about this file at all. As we shall see, however, the ''.changes''
file can be very useful for recovering from errors, or replaying lost changes.
More about this later!

It may seem like the image is the key mechanism for storing and managing
software projects, but that is not the case. As we shall see soon, there are
much better tools for managing code and sharing software developed by teams.
Images are very useful, but you should learn to be very cavalier about creating
and throwing away images, since tools like Monticello offer much better ways to
manage versions and share code amongst developers. In addition, if you need to
store objects you can use several systems such as Fuel (a fast object binary
serializer), STON (a textual object serializer) or a database.

!!Playground and Transcripts

Let us start with some exercises:

1. Close all open windows.

2. Open a Transcript and a Playground/workspace. (The Transcript can be opened from the
==World > Tools > ...== submenu.)

3. Position and resize the transcript and playground windows so that the
playground just overlaps the transcript.

You can resize windows by dragging one of the corners.

At any time only one window is active; it is in front and has its border
highlighted.

The Transcript is an object that is often used for logging system messages. It
is a kind of "system console".

Playgrounds are useful for typing snippets of code that you would like to
experiment with. You can also use playgrounds simply for typing arbitrarily text
that you would like to remember, such as to-do lists or instructions for anyone
who will use your image. Playgrounds are often used to hold documentation about
a captured image, as well.

Type the following text into the playground:

[[[language = Smalltalk
Transcript show: 'hello world'; cr.]]]

1. Try double-clicking at various points on the text you have just typed. Notice
how an entire word, entire string, or all of the text is selected, depending on
whether you click within a word, at the end of the string, or at the end of the
entire expression. In particular, if you place the cursor before the first
character or after the last character and double-click you select the complete
paragraph.

2. Select the text you have typed, right click and select ''Do it (d)''. ==(d)==
indicates that you can use the shortcut ==CMD-d== to get the same result.

3. Notice how the text "hello world" appears in the transcript window. Do it
again.

+Executing an expresssion: displaying a string in the Transcript.>file://figures/HelloWorld_new.png|width=80|label=fig:HelloWorld+

!!Keyboard shortcuts

If you want to evaluate an expression, you do not always have to right click.
Instead, you can use keyboard shortcuts. These are the parenthesized expressions
in the menu. Depending on your platform, you may have to press one of the
modifier keys which are Control, Alt and Command. We will be focusing on the Mac
OS platform since this is the platform most Pharo developers use, where the
command key (a.k.a ==CMD==) is the main modifier key. On Linux or Windows, the
corresponding key is ==ALT==, so each time you see something like ==CMD-d==,
just replace it with the appropriate modifier key depending on your OS.

@@todo TODO: Test that alt is the modifier key for Linux

In addition to ""do it"", you might have noticed ""print it"", ""inspect it""
and ""explore it"". Let's have a quick look at each of these.

Type the expression ==3 + 4== into the playground. Now ""do it"" with the
keyboard shortcut.

Do not be surprised if you saw nothing happen! What you just did is send the
message ==+== with argument 4 to the number 3. Normally the resulting 7  would
have been computed and returned to you, but since the playground did not know
what to do with this answer, it simply threw the answer away. If you want to see
the result, you should ""print it"" instead. ""print it"" actually compiles the
expression, executes it, sends the message ==printString== to the result, and
displays the resulting string.

Select ==3+4== and ""print it"" (==CMD-p==).

This time we see the result we expect.

[[[lang=Smalltalk
3 + 4 --> 7]]]

We use the notation ""-->"" as a convention in this book to indicate that a
particular Pharo expression yields a given result when you ""print it"".

Delete the highlighted text "7" (Pharo should have selected it for you, so you
can just press the delete key). Select ==3+4== again and this time ""inspect
it"" (==CMD-i==)

Now you should see a new window, called an ''inspector'', with the heading
SmallInteger: 7. The inspector is an extremely useful tool that will allow you
to browse and interact with any object in the system. The title tells us that 7
is an instance of the class ''SmallInteger''. The left panel allows us to browse
the instance variables of an object, the values of which are shown in the right
panel. The bottom panel can be used to write expressions to send messages to the
object.

Type ""self squared"" in the bottom panel of the inspector on ""7"" and ""print
it"".

+Inspecting an object>file://figures/inspector.png|width=80|label=fig:inspector+

Close the inspector. Type the expression ==Object== in a playground and this
time ""explore it"" (==CMD-I==, that is, the uppercase i, or ==CMD-SHIFT-i==).

This time you should see a window labelled ""Object"" containing the text
""root: Object"". Click on the triangle to open it up.

+Exploring Object>file://figures/explorer.png|width=60|label=fig:explorer+

The explorer is similar to the inspector, but it offers a tree view of a complex
object. In this case the object we are looking at is the ""Object"" class. We
can see directly all the information stored in this class, and we can easily
navigate to all its parts.

!!The System Browser

The ""System Browser"", also known as "Class Browser", is one of the key tools
used for programming. As we shall see, there are several interesting browsers
available for Pharo, but this is the basic one you will find in any image.

@@todo TODO: factorial on number would be better. and should redo the screenshot

!!!! Open the System Browser

Open the Browser by selecting World Menu > System Browser.

+The System Browser showing the printString method of class Object>file://figures/system-browser.png|width=100|label=fig:systemBrowser+

We can see a System Browser in Figure *fig:systemBrowser*. The title bar indicates
that we are browsing the class Object and its method ==printString==.

When a new System Browser window first opens, all panes are empty but the
leftmost one. This first pane lists all known packages, which contain groups of
related classes.

When we select a package, it causes the second pane to show a list of all of the
classes in the selected package. When a class is selected the remaining two
panes will be filled with text. The third pane displays the protocols of the
currently selected class. These are convenient groupings of related methods. If
no protocol is selected you should see all methods in the fourth pane.

!!!! Select the ""printing"" protocol

You may have to scroll down to find it. You can also click on the third pane and
type ==pr==, to typeahead-find the ==printing== protocol. Now select it, and you
will see in the fourth pane only methods related to printing.

!!!! Select the ""printString"" method

Now we see in the bottom pane the source code of the ==printString== method,
shared by all objects in the system (except those that override it).

!!Finding classes

There are several ways to find a class in Pharo. The first, as we have just
seen above, is to know (or guess) what package it is in, and to navigate to it
using the browser.

A second way is to send the ""browse"" message to the class, asking it to open a
browser on itself. Suppose we want to browse the class ""Boolean"".

!!!!Using the message ==browse==

Type ""Boolean browse"" into a playground and ""do it"".

A browser will open on the Boolean class.

!!!!Using CMD-b to browse

There is also a keyboard shortcut ==CMD-b== (browse) that you can use in any
tool where you find a class name; select the name and press ==CMD-b==. Use this
keyboard shortcut to browse the class ""Boolean"".

Notice that when the Boolean class is selected but no protocol or method is
selected, instead of the source code of a method, we see a class definition.
This is nothing more than an ordinary message that is sent to the parent class,
asking it to create a subclass. Here we see that the class Object is being asked
to create a subclass named Boolean with no instance variables, class variables
or ''pool dictionaries'', and to put the class Boolean in the Kernel-Objects
package. If you click on the ""comments"" button at the bottom of the class
pane, you can see the class comment in a dedicated pane.

+The Boolean class with the comments section>file://figures/Boolean.png|width=100|label=fig:boolean+

!!!!Find class in System Browser

Often, the fastest way to find a class is to search for it by name. For example,
suppose that you are looking for some unknown class that represents dates and
times.

In the System Browser, place the mouse in the package pane of the browser and
type ==CMD-f==, or select ==find class (f)== by right clicking inside the
package pane. Type "time" in the dialog box and accept it.

You will be presented with a list of classes whose names contain "time". Choose
one (say, Time), and the browser will show it, along with a class comment that
suggests other classes that might be useful. If you want to browse one of the
others, select its name (in any text pane), and type ==CMD-b==.

Note that if you type the complete (and correctly capitalized) name of a class
in the find dialog, the browser will go directly to that class without showing
you the list of options.

!!!!Using Spotlight

Pressing Shift and Enter will bring Spotlight, a simple but powerfull tool to
find classes and methods. Figure *fig:spotlight* shows that we look for ==Point==.
The system proposes us several possibilities.

+Spotlight>file://figures/spotlight.png|width=50|label=fig:spotlight+

!!!!Using the Finder

You can also open the Finder that is available from the Tools menu and type part
of the name of the class. It is less efficient than using Spotlight or the
SystemBrowser as explained above. The Finder is more powerful for other queries
as we will show later.

!!Finding methods

Sometimes you can guess the name of a method, or at least part of the name of a
method, more easily than the name of a class. For example, if you are interested
in the current time, you might expect that there would be a method called "now",
or containing "now" as a substring. But where might it be? The ""method finder""
can help you.

Select World Menu -> Tools -> Method finder. Type "now" in the top left pane,
and ""accept"" it (or just press the RETURN key). You should get a situation
similar to the one of Figure *fig:finder*.

The method finder will display a list of all the method names that contain the
substring "now". To scroll to now itself, move the cursor to the list and type
"n"; this type-ahead trick works in all scrolling windows. Select "now" and the
right-hand pane shows you the classes that define a method with this name.
Selecting any one of them will open a browser on it.

+The method finder showing all classes defining a method named
now.>file://figures/finder.png|width=80|label=fig:finder+

At other times you may have a good idea that a method exists, but will have no
idea what it might be called. The method finder can still help! For example,
suppose that you would like to find a method that turns a string into upper
case, for example, it would translate 'eureka' into 'EUREKA'. We can give the
inputs and expected output of a method and the Finder will try to find it for
you.

!!!!Using examples

The Finder has a really powerful functionality: you can give the receiver,
arguments and expected result and the finder tries to find the corresponding
message.

- In the Finder, select the examples mode using the second combo-box (the one that shows ==Selectors== by default).

- Type =='eureka'. 'EUREKA'== into the method finder and press the RETURN key.

The method finder will suggest a method that does what you want.

An asterisk at the beginning of a line in the right pane of the method finder
indicates that this method is the one that was actually used to obtain the
requested result. So, the asterisk in front of ==String>>asUppercase== lets us
know that the method ==asUppercase== defined on the class ==String== was
executed and returned the result we wanted. The methods that do not have an
asterisk are just the other methods that have the same name as the ones that
returned the expected result. So ==Character>>asUppercase== was not executed in
our example, because =='eureka'== is not a ==Character== object.

You can also use the method finder for methods with arguments. For example, if
you are looking for a method that will find the greatest common factor of two
integers, you might try ==25. 35. 5== as an example. You can also give the method
finder multiple examples to narrow the search space; the help text in the bottom
pane explains how.

!!Defining a new method

The advent of Test Driven Development (TDD) has changed the way that we write
code. The idea behind TDD is that we write a test that defines the desired
behaviour of our code before we write the code itself. Only then do we write the
code that satisfies the test.

Suppose that our assignment is to write a method that "says something loudly and
with emphasis". What exactly could that mean? What would be a good name for such
a method? How can we make sure that programmers who may have to maintain our
method in the future have an unambiguous description of what it should do? We
can answer all of these questions by giving an example.

Our goal is to define a new method named ==shout== on the class ==String==. The
idea is that this message should turn a string into its uppercase version as
shown in the example below:

[[[
'Don''t panic' shout
--> 'DON''T PANIC!'
]]]

However, before creating the ==shout== method itself, we must first create a
test method! In the next section, we can use the "Don't Panic" example to
create our test method.

!!!Defining a new test method

How do we create a new method in Pharo? First, we have to decide which class the
method should belong to. In this case, the ==shout== method that we are testing
will go in class ==String==, so the corresponding test will, by convention, go
in a class called ==StringTest==.

First, open a browser on the class ==StringTest==, and select an appropriate
protocol for our method, in this case =='tests - converting'==. The highlighted
text in the bottom pane is a template that reminds you what a Pharo method looks
like. Delete this template code (remember, you can either click on the beginning
or the end of the text, or press ==CMD-a==, to "Select All"), and start typing
your method. We can turn our "Don't Panic" code example into the test method
itself:

[[[ lang=Smalltalk
testShout
	self assert: ('Don''t panic' shout = 'DON''T PANIC!')
]]]

Once you have typed the text into the browser, notice that the corner is orange.
This is a reminder that the pane contains unsaved changes. So, select ==accept
(s)== by right clicking in the bottom pane, or just type ==CMD-s==, to compile
and save your method. You should see a situation similar to the one depicted in
Figure *fig:testshout*.

+Defining a test method in the class
==StringTest==.>file://figures/testshout-00.png|width=70|label=fig:testshout+

If this is the first time you have accepted any code in your image, you will
likely be prompted to enter your name. Since many people have contributed code
to the image, it is important to keep track of everyone who creates or modifies
methods. Simply enter your first and last names, without any spaces (you can
also use a dot to separate).

Because there is as yet no method called ==shout==, the browser will ask you to
confirm that this is the name that you really want. It will also suggest some
other names that you might have intended. This can be quite useful if you have
merely made a typing mistake, but in this case, we really do mean ==shout==,
since that is the method we are about to create. We confirm this by selecting
the first option from the menu of choices.

!!! Running your test method

Run your newly created test: open the ""Test Runner"" from the World Menu.

The leftmost two panes are a bit like the top panes in the System Browser. The
left pane contains a list of packages, but it's restricted to those packages
that contain test classes.

Select ""CollectionsTests-Strings"", and the pane to the right will show all of
the test classes in that package, which includes the class ""StringTest"". The
names of the classes are already selected, so click Run Selected to run all
these tests.

+Failed test - Message not Understood>file://figures/preview-1.png|width=70|label=fig:messageNotUnderstood+

You should see the upper right pane turn red, which indicates that there was an
error in running the tests. The list of tests that gave rise to errors is shown
in the bottom right pane. As you can see, ==StringTest>>testShout== is the
culprit. (Note that ==StringTest>>testShout== is the Pharo way of identifying
the ==testShout== method of the ==StringTest== class.) If you click on that
method in the bottom right pane, the erroneous test will run again, this time in
such a way that you see the error happen: ==MessageNotUnderstood:
ByteString>>shout== (see Figure *fig:messageNotUnderstood*).

The window that opens with the error message is the Pharo debugger. We will look
at the debugger and how to use it in Chapter *cha:env*: The Pharo Environment.

+Pressing the Create button in the debugger prompts you to select which class to create the new method in>file://figures/preview-2.png|width=70|label=fig:createPromptWhichClass+

!!!Implementing the test method

The error is, of course, exactly what we expected: running the test generates an
error because we haven't yet written a method that tells strings how to shout.
Nevertheless, it's good practice to make sure that the test fails because this
confirms that we have set up the testing machinery correctly and that the new
test is actually being run. Once you have seen the error, you can ""Abandon""
the running test, which will close the debugger window.

+You can implement methods in the debugger itself, via the Create button.>file://figures/shouldBeImplemented-3.png|width=70|label=fig:shoutShouldBeImplemented+

+The newly created ==shout== method.>file://figures/shoutInDebugger-4.png|width=70|label=fig:shoutInDebugger+

Instead of pressing ""Abandon"", you can define the missing method using the
""Create"" button right in the debugger. This will prompt you to select a class
in which to define the new method (see Figure *fig:createPromptWhichClass*), then
prompt you to select a protocol for that method, and finally take you to a code
editor window in the debugger, in which you can edit the code for this new
method (see Figure *fig:shoutShouldBeImplemented*). When you've finished
implementing the method, you can press ""Proceed"" and continue with the tests.
Note that ""Proceed"" simply continues on running the test suite, and does not
re-run the failed method.

Now let's define the method that will make the test succeed!

Select class ==String== in the browser, select the converting protocol method,
type the code of the method bellow over the method template, and ""accept"" it.

[[[ lang= Smalltalk
shout
  ^ self asUppercase,'!' ]]]

The comma is the string concatenation operation, so the body of this method
appends an exclamation mark to an upper-case version of whatever String object
the shout message was sent to. The ==^== tells Pharo that the expression that
follows is the answer to be returned from the method, in this case the new
concatenated string.

Does this method work? Let's run the tests and see.

Click on ""Run Selected"" again in the test runner, and this time you should see
a green bar and text indicating that all of the tests ran with no failures and
no errors.

When you get to a green bar, it's a good idea to save your work by saving the
image, and take a break. So do that right now!

!!Chapter Summary

This chapter has introduced you to the Pharo environment and shown you how to
use some of the major tools, such as the browser, the method finder, the
debugger, and the test runner. You have also seen a little of Pharo's syntax,
even though you may not understand it all yet.

-A running Pharo system consists of a ''virtual machine'', a ''.sources'' file, and ''.image'' and ''.changes'' files. Only these last two change, as they record a snapshot of the running system.
-When you restore a Pharo image, you will find yourself in exactly the same state (i.e., with exactly the same running objects) that you had when you last saved that image.
-You can click on the Pharo background to bring up the ""World menu"" and launch various tools.
-A ""Playground"" is a tool for writing and evaluating snippets of code. You can also use it to store arbitrary text.
-You can use keyboard shortcuts on text in the playground, or any other tool, to evaluate code. The most important of these are do it (==CMD-d==), print it (==CMD-p==), inspect it (==CMD-i==), explore it (==CMD-I==) and browse it (==CMD-b==).
-The ""browser"" is the main tool for browsing Pharo code and for developing new code.
-The ""test runner"" is a tool for running unit tests, and aids in Test Driven Development.
-The ""debugger"" allows you to examine errors and exceptions (such as errors or failures encountered when running tests). You can even create new methods right in the debugger.
